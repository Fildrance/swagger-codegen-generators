using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Text;
using System.Threading.Tasks;
using System.CodeDom.Compiler;
using {{clientPackage}};
{{#hasImport}}using {{modelPackage}};
{{/hasImport}}

namespace {{apiPackage}};

{{#operations}}
/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
[GeneratedCode("swagger-codegen", "{{generatorVersion}}")]
public partial interface I{{classname}}
{
    {{#operation}}
    /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>
    {{/allParams}}/// <returns>{{#returnType}}{{returnType}}{{/returnType}}</returns>
    {{#returnType}}Task<{{{returnType}}}>{{/returnType}}{{^returnType}}Task{{/returnType}} {{nickname}} ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
    {{/operation}}
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>  
[GeneratedCode("swagger-codegen", "{{generatorVersion}}")]
public partial class {{classname}} : {{apiClientBaseTypeName}}, I{{classname}}
{
    /// <summary>
    /// Initializes a new instance of the <see cref="{{classname}}"/> class.
    /// </summary>
    /// <param name="httpClient"> HttpClient to be used for calls. </param>
    /// <param name="basePath"> Base url to be used for calls. </param>
    public {{classname}}(HttpClient httpClient, String basePath="{{{basePath}}}") : base(httpClient, basePath)
    {
    }

    {{#operation}}
    /// <inheritdoc />     
    public async {{#returnType}}Task<{{{returnType}}}>{{/returnType}}{{^returnType}}Task{{/returnType}} {{nickname}}({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
    {
        {{#allParams}}{{#required}}// verify the required parameter '{{paramName}}' is set
        if ({{paramName}} == null) throw new {{exceptionTypeName}}(400, "Missing required parameter '{{paramName}}' when calling {{nickname}}");
        {{/required}}{{/allParams}}
        var path_ = new StringBuilder("{{{path}}}"); {{#pathParams}}
        path_ = path_.Replace("{{=<% %>=}}{<% baseName %>}<%={{ }}=%>", ParameterToString({{{paramName}}}));{{/pathParams}}

        {{#queryParams.0}}var queryParams = new Dictionary<string, string>();
        {{/queryParams.0}}{{#headerParams.0}}var headerParams = new Dictionary<string, string>();
        {{/headerParams.0}}{{#formParams.0}}var formParams = new Dictionary<string, string>();
        {{/formParams.0}}{{#formParams.0}}var fileParams = new Dictionary<string, FileParameter>();
        {{/formParams.0}}{{#queryParams}} 
        if ({{paramName}} != null) queryParams.Add("{{baseName}}", ParameterToString({{paramName}})); // query parameter{{/queryParams}}{{#headerParams}}
        if ({{paramName}} != null) headerParams.Add("{{baseName}}", ParameterToString({{paramName}})); // header parameter{{/headerParams}}{{#formParams}}
        if ({{paramName}} != null) {{#isFile}}fileParams.Add("{{baseName}}", ParameterToFile("{{baseName}}", {{paramName}}));{{/isFile}}{{^isFile}}formParams.Add("{{baseName}}", ParameterToString({{paramName}})); // form parameter{{/isFile}}{{/formParams}}
        
        {{#returnType}}var response = {{/returnType}}await CallApi{{#returnType}}<{{{returnType}}}>{{/returnType}}(
                    path_.ToString(), 
                    HttpMethod.{{httpMethod}},{{#queryParams.0}}
                    queryParams: queryParams,{{/queryParams.0}}{{#bodyParam}}
                    body: {{paramName}}, {{/bodyParam}}{{#headerParams.0}}
                    headerParams: headerParams,{{/headerParams.0}} {{#formParams.0}}
                    formParams: formParams,
                    fileParams: fileParams,{{/formParams.0}} 
                    ct: ct
        );{{#returnType}}
        return response;{{/returnType}}
    }

    {{/operation}}
}
{{/operations}}
